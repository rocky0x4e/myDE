#################################
#             Shadows           #
#################################


# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
shadow = false;
shadow-radius = 6; # The blur radius for shadows, in pixels. (defaults to 12)
shadow-opacity = .75 # The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-offset-x = 0; # The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = 0; # The top offset for shadows, in pixels. (defaults to -15)
shadow-color = "#000000" # Hex string color value of shadow - defaults to #000000. This overrides shadow-(red/green/blue)

# Specify a list of conditions of windows that should have no shadow.
# examples:
#   shadow-exclude = "n:e:Notification";
# shadow-exclude = ["_NET_WM_WINDOW_TYPE:a *= '_KDE_NET_WM_WINDOW_TYPE_OVERRIDE'"]


# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""

# Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = false


#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
fading = false;
fade-in-step = 0.02; # Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-out-step = 0.02; # Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-delta = 5 # The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-exclude = []
no-fading-openclose = false # Do not fade on window open/close.
no-fading-destroyed-argb = false # Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.

#################################
#   Transparency / Opacity      #
#################################
# inactive-opacity = 1.0; # Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
frame-opacity = 1.0 # Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# inactive-opacity-override = true # Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
# active-opacity = 1.0 # Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
# inactive-dim = 0.0 # Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# focus-exclude = [];

# inactive-dim-fixed = 1.0 # Use fixed inactive dim value, instead of adjusting according to window opacity.

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
# example:
#    opacity-rule = [ "80:class_g = 'URxvt'" ];
# opacity-rule = [];

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 0;

# Exclude conditions for rounded corners.
# rounded-corners-exclude = [];


#################################
#     Background-Blurring       #
#################################


# Parameters for background blurring, see the *BLUR* section for more information.
blur-method = "none";  # Blur method: none | dual_kawase | 
blur-strength = 3;  # Adjust for your preference
# blur-size = 12
# blur-deviation = false


# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
# The name of the switch may change without prior notifications.
#
blur-background = false;

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
# Bad in performance, with driver-dependent behavior. The name may change.
#
# blur-background-frame = false


# Use fixed blur strength rather than adjusting according to window opacity.
# blur-background-fixed = false


# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ""
blur-kern = "3x3box";


# Exclude conditions for background blur.
# blur-background-exclude = [];

#################################
#       General Settings        #
#################################

dbus = true # Enable remote control via D-Bus. See the man page or the *D-BUS API* section below for more details.
# daemon = false # Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
backend = "glx" ; # Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`. default: xrender
vsync = true; # Enable/disable VSync.

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
# mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
# use-ewmh-active-win = false

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
# unredir-if-possible = false

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
# detect-transient = false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
# detect-client-leader = false

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
#
# invert-color-include = []

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
#
# glx-no-stencil = false

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
# glx-no-rebind-pixmap = false

# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = false;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window
# contents. Read the man page for a detailed explanation of the interface.
#
# window-shader-fg = "default"

# Use rules to set per-window shaders. Syntax is SHADER_PATH:PATTERN, similar
# to opacity-rule. SHADER_PATH can be "default". This overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
log-level = "warn";

# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
## When rules are presented, all the other *-rule and *-exclude settings have no affect.

rules = (
  { match = "window_type = 'normal'"; corner-radius = 5;
    animations = (
      { triggers = [ "close", "hide" ]; preset = "disappear"; scale= 0.5; duration = 0.25;},
      { triggers = [ "open","show" ]; preset = "appear"; scale= 0.5; duration = 0.25;}
    ) ;
  },
  { match = "window_type = 'tooltip'";
    fade = true; focus = true;
  },
  { match = "window_type = 'dock'";
    clip-shadow-above = true; fading = false;
  },
  { match = "window_type = 'dnd'"; },
  { match = "window_type = 'utility'";},
  { match = "window_type = 'popup_menu'"; },
  { match = "class_g = 'Rofi'";
    animations = (
      { triggers = [ "close", "hide" ]; preset = "slide-out"; direction = "down"; },
      { triggers = [ "open","show" ]; preset = "slide-in"; direction = "down"; }
    )
  },
  { match = "class_g != 'zoom'"; },
  { match = "window_type = 'notification'";
    animations = (
      { triggers = ["open", "show"]; preset = "appear"; },
      { triggers = ["close", "hide"]; preset = "disappear"; }
    )
  },
  { match = "window_type = 'dialog'";
    animations = (
      { triggers = [ "close", "hide" ]; preset = "slide-out"; direction = "up"; },
      { triggers = [ "open","show" ]; preset = "slide-in"; direction = "up"; }
    )
  },
  { match = "window_type = 'menu'"; },
  { match = "class_g = 'i3-frame'";
    animations = (
      { triggers = ["open", "show"]; preset = "appear"; },
      { triggers = ["close", "hide"]; preset = "disappear"; }
    )
  },
  { # maim screenshot
    match = "class_g = 'slop'";
    animations = (
      { triggers = ["open", "show"]; preset = "appear"; },
      { triggers = ["close", "hide"]; preset = "disappear"; }
    )
  },
  { match = "focused = true"; shadow = true;},
  { match = "role = 'quake'"; shadow = false;
    animations = (
      { triggers = [ "close", "hide" ]; preset = "slide-out"; direction = "up"; },
      { triggers = [ "open","show" ]; preset = "slide-in"; direction = "up"; }
    )
  },
  { match = "class_g = 'Emulator'"; shadow = false; corner-radius = 0; },
  { match = "class_g = 'Cinnamon-settings.py'"; shadow = true; corner-radius = 8; }
)